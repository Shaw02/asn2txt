;****************************************************************
;*		プロトタイプ宣言				*
;****************************************************************
;=======================================
;■乱数（Mersenne twister方式（32bit演算））
init_by_array		proto	near,	init_key:FAR PTR DWORD,	key_length:SWORD
genrand_int32		proto	near

;=======================================
;■算術
Mul_32			proto	near	m1:DWORD,	m2:DWORD

;****************************************************************
;*		マクロ						*
;****************************************************************
;---------------------------------------------------------------|
;	32bit Add
;---------------------------------------------------------------|
;	引数
;		m1
;		m2
;	返り値
;		m1
;---------------------------------------------------------------|
ADD32	macro	m1, m2

	if	(@InStr(1,m1,<dx::ax>) EQ 1)
		add	ax, word ptr m2[0]
		adc	dx, word ptr m2[2]
	else
		push	ax
		push	dx

		mov	ax, word ptr m1[0]
		mov	dx, word ptr m1[2]
		add	word ptr m2[0], ax
		adc	word ptr m2[2], dx

		pop	dx
		pop	ax
	endif

	endm
;---------------------------------------------------------------|
;	32bit Sub
;---------------------------------------------------------------|
;	引数
;		m1
;		m2
;	返り値
;		m1
;---------------------------------------------------------------|
ADD32	macro	m1, m2

	if	(@InStr(1,m1,<dx::ax>) EQ 1)
		sub	ax, word ptr m2[0]
		sbb	dx, word ptr m2[2]
	else
		push	ax
		push	dx

		mov	ax, word ptr m2[0]
		mov	dx, word ptr m2[2]
		sub	word ptr m1[0], ax
		sbb	word ptr m1[2], dx

		pop	dx
		pop	ax
	endif

	endm
;---------------------------------------------------------------|
;	32bit MUL
;---------------------------------------------------------------|
;	引数
;		m1	掛け算
;		m2	掛け算
;	返り値
;		m1
;---------------------------------------------------------------|
MUL32	macro	m1, m2

	if	(@InStr(1,m1,<dx::ax>) EQ 1)
		invoke	Mul_32,	m1,m2
	else
		push	ax
		push	dx

		invoke	Mul_32,	m1,m2
		mov	word ptr m1[0], ax
		mov	word ptr m1[2], dx

		pop	dx
		pop	ax
	endif

	endm
;---------------------------------------------------------------|
;	32bit left shift
;---------------------------------------------------------------|
;	引数
;		p1::p2		元
;		c		シフト量
;	返り値
;		si::di		シフト後
;---------------------------------------------------------------|
SHL32	macro	p2, p1, c

	mov	di, p1
	mov	si, p2
	shr	di, (16-c)	;di  = p1 >> 16-s
	shl	si, c		;si  = p2 << s
	or	si, di		;si  = p2::p1 << s
	mov	di, p1
	shl	di, c		;di  = p1 << 7

	endm
;---------------------------------------------------------------|
;	32bit right shift
;---------------------------------------------------------------|
;	引数
;		p1::p2		元
;		c		シフト量
;	返り値
;		si::di		シフト後
;---------------------------------------------------------------|
SHR32	macro	p2, p1, c

	mov	di, p1
	mov	si, p2
	shr	di, c		;di = p1 >> 11
	shl	si, (16-c)	;si = p2 << 16-11(=5)
	or	di, si		;di = p2::p1 >> 11
	mov	si, p2	
	shr	si, c		;si = p2 >> 11

	endm
